package {{base_package}}.datagen;

import {{base_package}}.{{main_class_name}};
import net.minecraft.core.HolderLookup;
import net.minecraft.data.DataGenerator;
import net.minecraft.data.PackOutput;
import net.minecraft.data.loot.LootTableProvider;
import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.neoforge.common.data.BlockTagsProvider;
import net.neoforged.neoforge.common.data.ExistingFileHelper;
import net.neoforged.neoforge.data.event.GatherDataEvent;

// ==MM:EXTRA_IMPORTS_BEGIN==
// ==MM:EXTRA_IMPORTS_END==

import java.util.Collections;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@EventBusSubscriber(modid = {{main_class_name}}.MOD_ID, bus = EventBusSubscriber.Bus.MOD)
public class DataGenerators {

    @SubscribeEvent
    public static void gatherData(GatherDataEvent event) {
        DataGenerator generator = event.getGenerator();
        PackOutput packOutput = generator.getPackOutput();
        ExistingFileHelper existingFileHelper = event.getExistingFileHelper();
        CompletableFuture<HolderLookup.Provider> lookupProvider = event.getLookupProvider();

        // ---- Server providers (standard) ----
        generator.addProvider(event.includeServer(), new LootTableProvider(
                packOutput,
                Collections.emptySet(),
                List.of(
                    // You can add more subproviders between the anchors if needed.
                    // ==MM:LOOT_SUBPROVIDERS_BEGIN==
                    new LootTableProvider.SubProviderEntry(ModBlockLootTableProvider::new, LootContextParamSets.BLOCK)
                    // ==MM:LOOT_SUBPROVIDERS_END==
                ),
                lookupProvider
        ));

        generator.addProvider(event.includeServer(), new ModRecipeProvider(packOutput, lookupProvider));

        BlockTagsProvider blockTagsProvider =
                new ModBlockTagProvider(packOutput, lookupProvider, existingFileHelper);
        generator.addProvider(event.includeServer(), blockTagsProvider);
        generator.addProvider(event.includeServer(),
                new ModItemTagProvider(
                        packOutput, lookupProvider, blockTagsProvider.contentsGetter(), existingFileHelper
                )
        );

        generator.addProvider(event.includeServer(), new ModDataMapProvider(packOutput, lookupProvider));

        // You can register additional server-side providers here.
        // ==MM:SERVER_DATA_PROVIDERS_BEGIN==
        // ==MM:SERVER_DATA_PROVIDERS_END==

        // ---- Client providers (standard) ----
        generator.addProvider(event.includeClient(), new ModItemModelProvider(packOutput, existingFileHelper));
        generator.addProvider(event.includeClient(), new ModBlockStateProvider(packOutput, existingFileHelper));

        // You can register additional client-side providers here.
        // ==MM:CLIENT_DATA_PROVIDERS_BEGIN==
        // ==MM:CLIENT_DATA_PROVIDERS_END==
    }
}
