package {{base_package}}.datagen;

import {{base_package}}.{{main_class_name}};
import {{base_package}}.block.ModBlocks;
import {{base_package}}.item.ModItems;
import net.minecraft.data.PackOutput;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.block.Block;
import net.neoforged.neoforge.client.model.generators.ItemModelProvider;
import net.neoforged.neoforge.common.data.ExistingFileHelper;
import net.neoforged.neoforge.registries.DeferredBlock;
import net.neoforged.neoforge.registries.DeferredItem;

// ==MM:EXTRA_IMPORTS_BEGIN==
// ==MM:EXTRA_IMPORTS_END==

public class ModItemModelProvider extends ItemModelProvider {
    public ModItemModelProvider(PackOutput output, ExistingFileHelper existingFileHelper) {
        super(output, {{main_class_name}}.MOD_ID, existingFileHelper);
    }

    @Override
    protected void registerModels() {
        // ==MM:ITEM_MODEL_REGISTRATIONS_BEGIN==
        // ==MM:ITEM_MODEL_REGISTRATIONS_END==
    }

    // --- Helpers ---

    /** Items from ModItems (DeferredItem). */
    public void registerItemModel(String modelType, DeferredItem<?> item) {
        switch (modelType) {
            case "basicItem" -> super.basicItem(item.get());
            case "handheldItem" -> withExistingParent(item.getId().getPath(), mcLoc("item/handheld"))
                    .texture("layer0", ResourceLocation.fromNamespaceAndPath(
                            {{main_class_name}}.MOD_ID,
                            "item/" + item.getId().getPath()
                    ));
            default -> throw new IllegalArgumentException("Item pipeline only supports 'basicItem' or 'handheldItem'. Got: " + modelType);
        }
    }

    /** Block items (e.g., doors) registered under ModBlocks. Only valid for "basicItem". */
    public void registerItemModel(String modelType, DeferredBlock<?> block) {
        if (!"basicItem".equals(modelType)) {
            throw new IllegalArgumentException("Block-as-item models only support 'basicItem'. Got: " + modelType);
        }
        super.basicItem(block.get().asItem());
    }


    public void buttonItem(DeferredBlock<?> block, DeferredBlock<Block> baseBlock) {
        this.withExistingParent(block.getId().getPath(), mcLoc("block/button_inventory"))
            .texture("texture",
                ResourceLocation.fromNamespaceAndPath(
                    {{main_class_name}}.MOD_ID,
                    "block/" + baseBlock.getId().getPath()
                )
            );
    }

    public void fenceItem(DeferredBlock<?> block, DeferredBlock<Block> baseBlock) {
        this.withExistingParent(block.getId().getPath(), mcLoc("block/fence_inventory"))
            .texture("texture",
                ResourceLocation.fromNamespaceAndPath(
                    {{main_class_name}}.MOD_ID,
                    "block/" + baseBlock.getId().getPath()
                )
            );
    }

    public void wallItem(DeferredBlock<?> block, DeferredBlock<Block> baseBlock) {
        this.withExistingParent(block.getId().getPath(), mcLoc("block/wall_inventory"))
            .texture("wall",
                ResourceLocation.fromNamespaceAndPath(
                    {{main_class_name}}.MOD_ID,
                    "block/" + baseBlock.getId().getPath()
                )
            );
    }
}
